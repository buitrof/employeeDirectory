{"version":3,"sources":["components/Employees/Employees.js","components/Form/Form.js","components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["Employees","props","className","employee","map","x","i","key","first_name","last_name","email","username","password","onClick","handleDeletion","Form","htmlFor","type","name","value","onChange","handleInputChange","handleFormSubmission","Jumbotron","App","state","event","setState","target","preventDefault","JSON","parse","stringify","push","splice","this","myData","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.708aeb81.chunk.js","sourcesContent":["import React from 'react'\n\nconst Employees = props => {\n  return (\n    <div className=\"card col-md-12\">\n      {\n        props.employee.map((x, i) => (\n          <p key={i}>\n            First Name: {x.first_name}, \n            Last Name: {x.last_name}, \n            Email: {x.email}, \n            Username: {x.username}, \n            Password: {x.password}\n            <button className=\"btn btn-danger\" onClick={() => props.handleDeletion(i)}>x</button>\n          </p>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default Employees","import React from 'react'\nimport './Form.css'\n\nconst Form = props => {\n  return (\n    <div className='card'>\n      <form>\n        <div className=\"form-group\">\n          <label htmlFor=\"first_name\">First Name</label>\n          <input className=\"form-control\"\n            type=\"text\"\n            name=\"first_name\"\n            value={props.first_name}\n            onChange={props.handleInputChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"last_name\">Last Name</label>\n          <input className=\"form-control\"\n            type=\"text\"\n            name=\"last_name\"\n            value={props.last_name}\n            onChange={props.handleInputChange}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"username\">Username</label>\n          <input className=\"form-control\"\n            type=\"text\"\n            name=\"username\"\n            value={props.username}\n            onChange={props.handleInputChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email address</label>\n          <input className=\"form-control\"\n            type=\"email\"\n            name=\"email\"\n            value={props.email}\n            onChange={props.handleInputChange} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input className=\"form-control\"\n            type=\"password\"\n            name=\"password\"\n            value={props.password}\n            onChange={props.handleInputChange} />\n        </div>\n        <button onClick={props.handleFormSubmission} className=\"btn btn-primary\">Submit</button>\n      </form>\n    </div>\n  )\n}\n        \nexport default Form","import React from 'react'\n\nconst Jumbotron = () => {\n  return (\n    <div className=\"jumbotron\">\n      <h1 className=\"display-4\">Employee Directory</h1>\n      <p className=\"lead\">Add an employee, or look through the existing employees and delete them if you wish. Our passwords are super secure, don't worry!</p>\n    </div>\n  )\n}\n\nexport default Jumbotron","import React, { Component } from 'react'\nimport Employees from './components/Employees'\nimport Form from './components/Form'\nimport Jumbotron from './components/Jumbotron'\nimport myData from './data.json'\n\nclass App extends Component {\n\n  state = {\n    employee: [{ first_name: '', \n    last_name: '', \n    username: '', \n    email: '', \n    password: ''}],\n    first_name: '',\n    last_name: '',\n    username: '',\n    email: '',\n    password: '',\n  }\n\n  componentDidMount () {\n    this.setState({ employee: myData })\n  }\n\n  handleInputChange = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  handleFormSubmission = event => {\n    event.preventDefault()\n    let employee = JSON.parse(JSON.stringify(this.state.employee))\n    employee.push({ first_name: this.state.first_name, \n      last_name: this.state.last_name, \n      username: this.state.username, \n      email: this.state.email, \n      password: this.state.password })\n    this.setState({ employee, first_name: '', last_name: '', username: '', email: '', password: '' })\n  }\n\n  handleDeletion = i => {\n    let employee = JSON.parse(JSON.stringify(this.state.employee))\n    employee.splice(i, 1)\n    this.setState({ employee })\n  }\n\n  render() {\n    return (\n      <>\n        <Jumbotron />\n        <Form \n        handleFormSubmission={this.handleFormSubmission}\n        handleInputChange={this.handleInputChange}\n        first_name={this.state.first_name}\n        last_name={this.state.last_name}\n        email={this.state.email}\n        username={this.state.username}\n        password={this.state.password}/>\n        <Employees \n        employee={this.state.employee}\n        handleDeletion={this.handleDeletion}/>\n      </>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}